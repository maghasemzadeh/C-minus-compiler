Program	â”¤
DeclarationList	${break;ifwhilereturnswitchID+-(NUM}
Declaration	intvoid${break;ifwhilereturnswitchID+-(NUM}
DeclarationInitial	(;[,)
DeclarationPrime	intvoid${break;ifwhilereturnswitchID+-(NUM}
VarDeclarationPrime	intvoid${break;ifwhilereturnswitchID+-(NUM}
FunDeclarationPrime	intvoid${break;ifwhilereturnswitchID+-(NUM}
TypeSpecifier	ID
Params	)
ParamListVoidAbtar	)
ParamList	)
Param	,)
ParamPrime	,)
CompoundStmt	intvoid${break;ifwhilereturnswitchID+-(NUM}elsecasedefault
StatementList	}casedefault
Statement	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
ExpressionStmt	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
SelectionStmt	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
IterationStmt	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
ReturnStmt	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
ReturnStmtPrime	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
SwitchStmt	{break;ifwhilereturnswitchID+-(NUM}elsecasedefault
CaseStmts	default}
CaseStmt	casedefault}
DefaultStmt	}
Expression	;)],
B	;)],
H	;)],
SimpleExpressionZegond	;)],
SimpleExpressionPrime	;)],
C	;)],
Relop	+-(IDNUM
AdditiveExpression	;)],
AdditiveExpressionPrime	<==;)],
AdditiveExpressionZegond	<==;)],
D	<==;)],
Addop	+-(IDNUM
Term	+-;)<==],
TermPrime	+-<==;)],
TermZegond	+-<==;)],
G	+-<==;)],
SignedFactor	*+-;)<==],
SignedFactorPrime	*+-<==;)],
SignedFactorZegond	*+-<==;)],
Factor	*+-;)<==],
VarCallPrime	*+-;)<==],
VarPrime	*+-;)<==],
FactorPrime	*+-<==;)],
FactorZegond	*+-<==;)],
Args	)
ArgList	)
ArgListPrime	)