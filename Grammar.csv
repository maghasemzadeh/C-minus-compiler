Program Declaration-list $
Declaration-list Declaration Declaration-list
Declaration-list ε
Declaration Declaration-initial Declaration-prime
Declaration-initial #type Type-specifier #pid ID
Declaration-prime Fun-declaration-prime
Declaration-prime Var-declaration-prime
Var-declaration-prime #var ; #pop
Var-declaration-prime [ #pnum_arr NUM ]  #save_arr ;
Fun-declaration-prime ( Params ) Compound-stmt
Type-specifier int
Type-specifier void
Params int #pid ID Param-prime Param-list
Params void Param-list-void-abtar
Param-list-void-abtar #pid ID Param-prime Param-list
Param-list-void-abtar ε
Param-list , Param Param-list
Param-list ε
Param Declaration-initial Param-prime
Param-prime [ ]
Param-prime ε
Compound-stmt { Declaration-list Statement-list } 
Statement-list Statement Statement-list
Statement-list ε
Statement Expression-stmt
Statement Compound-stmt
Statement Selection-stmt
Statement Iteration-stmt
Statement Return-stmt
Statement Switch-stmt
Expression-stmt Expression ; #pop
Expression-stmt break #jp_break;
Expression-stmt ;
Selection-stmt if ( Expression ) #save Statement else #jpf Statement #jp
Iteration-stmt while ( #label Expression ) #save Statement #while
Return-stmt return Return-stmt-prime
Return-stmt-prime ; 
Return-stmt-prime Expression ; 
Switch-stmt switch #tmp_save ( Expression ) { Case-stmts Default-stmt } #jp_switch
Case-stmts Case-stmt Case-stmts
Case-stmts ε
Case-stmt case #pnum NUM : #cmp_save Statement-list #jpf_switch
Default-stmt default : Statement-list
Default-stmt ε
Expression Simple-expression-zegond
Expression #pid ID B
B = Expression #assign
B [ Expression ] #array_address H
B Simple-expression-prime
H = Expression #assign
H G D C
Simple-expression-zegond Additive-expression-zegond C
Simple-expression-prime Additive-expression-prime C
C Relop Additive-expression #relop
C ε
Relop #relop_sign < 
Relop #relop_sign ==  
Additive-expression Term D
Additive-expression-prime Term-prime D
Additive-expression-zegond Term-zegond D
D Addop Term #add D
D ε
Addop #sign +
Addop #sign -
Term Signed-factor G
Term-prime Signed-factor-prime G
Term-zegond Signed-factor-zegond G
G * Signed-factor #mult G
G ε
Signed-factor #sign + Factor #signed_num
Signed-factor #sign - Factor #signed_num
Signed-factor Factor
Signed-factor-prime Factor-prime
Signed-factor-zegond #sign + Factor #signed_num
Signed-factor-zegond #sign - Factor #signed_num
Signed-factor-zegond Factor-zegond
Factor ( Expression )
Factor #pid ID Var-call-prime
Factor #pnum NUM
Var-call-prime ( Args )
Var-call-prime Var-prime
Var-prime [ Expression ] #array_address
Var-prime ε
Factor-prime ( Args ) #function_call
Factor-prime ε
Factor-zegond ( Expression )
Factor-zegond #pnum NUM
Args Arg-list
Args ε
Arg-list Expression Arg-list-prime
Arg-list-prime , Expression Arg-list-prime
Arg-list-prime ε